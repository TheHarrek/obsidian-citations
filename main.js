/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ExamplePlugin,
  modal: () => modal
});
var import_obsidian = __toModule(require("obsidian"));
var globals = class {
};
var modal = class extends import_obsidian.Modal {
  constructor(app, title) {
    super(app);
    title = title;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Citation" });
    new import_obsidian.Setting(contentEl).setName("Source").addText((text) => text.onChange((value) => {
      this.source = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Title").addText((text) => text.onChange((value) => {
      this.title = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Authors").addText((text) => text.onChange((value) => {
      this.author = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Date Published").addText((text) => text.onChange((value) => {
      this.date = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Auto").setCta().onClick(() => {
      this.dateViewed = (0, import_obsidian.moment)().format("DD-MM-YYYY");
    })).setName("Date Viewed").addText((text) => text.onChange((value) => {
      this.dateViewed = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  onSubmit(a) {
    new Notice("Citation Added");
    const editor = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView).editor;
    editor.replaceRange(`${a.author} ${a.date}, ${a.title}, Viewed ${a.dateViewed}, ${a.source}`, globals.cursor);
  }
};
var ExamplePlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "add-citation",
        name: "Add Citation",
        editorCallback: (editor) => {
          globals.cursor = editor.getCursor();
          new modal(this.app).open();
        }
      });
    });
  }
  onunload() {
    return __async(this, null, function* () {
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIFBsdWdpbiwgTW9kYWwsIFNldHRpbmcsIE1hcmtkb3duVmlldywgbW9tZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG4vLyBodWV0b2Fuc3VcclxuXHJcbmNsYXNzIGdsb2JhbHMge1xyXG4gIGN1cnNvcjogYW55O1xyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBtb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgdGl0bGU6IHN0cmluZykge1xyXG4gICAgc3VwZXIoYXBwKTtcclxuICAgIHRpdGxlID0gdGl0bGU7XHJcbiAgfVxyXG5cclxuICBvbk9wZW4oKSB7XHJcbiAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImgxXCIsIHsgdGV4dDogXCJDaXRhdGlvblwiIH0pO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAuc2V0TmFtZShcIlNvdXJjZVwiKVxyXG4gICAgICAuYWRkVGV4dCgodGV4dCkgPT5cclxuICAgICAgICB0ZXh0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5zb3VyY2UgPSB2YWx1ZVxyXG4gICAgICAgIH0pKTtcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgLnNldE5hbWUoXCJUaXRsZVwiKVxyXG4gICAgICAuYWRkVGV4dCgodGV4dCkgPT5cclxuICAgICAgICB0ZXh0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy50aXRsZSA9IHZhbHVlXHJcbiAgICAgICAgfSkpO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAuc2V0TmFtZShcIkF1dGhvcnNcIilcclxuICAgICAgLmFkZFRleHQoKHRleHQpID0+XHJcbiAgICAgICAgdGV4dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMuYXV0aG9yID0gdmFsdWVcclxuICAgICAgICB9KSk7XHJcbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgIC5zZXROYW1lKFwiRGF0ZSBQdWJsaXNoZWRcIilcclxuICAgICAgLmFkZFRleHQoKHRleHQpID0+XHJcbiAgICAgICAgdGV4dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMuZGF0ZSA9IHZhbHVlXHJcbiAgICAgICAgfSkpO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgLmFkZEJ1dHRvbigoYnRuKSA9PlxyXG4gICAgICBidG5cclxuICAgICAgICAuc2V0QnV0dG9uVGV4dChcIkF1dG9cIilcclxuICAgICAgICAuc2V0Q3RhKClcclxuICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmRhdGVWaWV3ZWQgPSBtb21lbnQoKS5mb3JtYXQoXCJERC1NTS1ZWVlZXCIpOyAvLyBOZWVkcyB0byBzZXQgdG8gdG9kYXlcclxuICAgICAgfSkpXHJcbiAgICAgIC5zZXROYW1lKFwiRGF0ZSBWaWV3ZWRcIilcclxuICAgICAgLmFkZFRleHQoKHRleHQpID0+XHJcbiAgICAgICAgdGV4dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcclxuICAgICAgICAgIHRoaXMuZGF0ZVZpZXdlZCA9IHZhbHVlXHJcbiAgICAgICAgfSkpO1xyXG4gICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAuYWRkQnV0dG9uKChidG4pID0+XHJcbiAgICAgICAgYnRuXHJcbiAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIlN1Ym1pdFwiKVxyXG4gICAgICAgICAgLnNldEN0YSgpXHJcbiAgICAgICAgICAub25DbGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5vblN1Ym1pdCh0aGlzKVxyXG4gICAgICAgICAgfSkpO1xyXG4gIH1cclxuICBvbkNsb3NlKCkge1xyXG4gICAgbGV0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgfVxyXG4gIG9uU3VibWl0KGEpIHtcclxuICAgIG5ldyBOb3RpY2UoXCJDaXRhdGlvbiBBZGRlZFwiKTtcclxuICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldykuZWRpdG9yO1xyXG4gICAgZWRpdG9yLnJlcGxhY2VSYW5nZSgoYCR7YS5hdXRob3J9ICR7YS5kYXRlfSwgJHthLnRpdGxlfSwgVmlld2VkICR7YS5kYXRlVmlld2VkfSwgJHthLnNvdXJjZX1gKSwgZ2xvYmFscy5jdXJzb3IpO1xyXG4gIH1cclxuICB9XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhhbXBsZVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcblxyXG4gIGFzeW5jIG9ubG9hZCgpIHtcclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiBcImFkZC1jaXRhdGlvblwiLFxyXG4gICAgICBuYW1lOiBcIkFkZCBDaXRhdGlvblwiLFxyXG4gICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yKSA9PiB7XHJcbiAgICAgICAgZ2xvYmFscy5jdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcbiAgICAgICAgbmV3IG1vZGFsKHRoaXMuYXBwKS5vcGVuKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIGFzeW5jIG9udW5sb2FkKCkge1xyXG5cclxuICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUEwRTtBQUkxRSxvQkFBYztBQUFBO0FBS1AsMEJBQW9CLHNCQUFNO0FBQUEsRUFDL0IsWUFBWSxLQUFVLE9BQWU7QUFDbkMsVUFBTTtBQUNOLFlBQVE7QUFBQTtBQUFBLEVBR1YsU0FBUztBQUNQLFVBQU0sRUFBRSxjQUFjO0FBQ3RCLGNBQVUsU0FBUyxNQUFNLEVBQUUsTUFBTTtBQUNqQyxRQUFJLHdCQUFRLFdBQ1QsUUFBUSxVQUNSLFFBQVEsQ0FBQyxTQUNSLEtBQUssU0FBUyxDQUFDLFVBQVU7QUFDdkIsV0FBSyxTQUFTO0FBQUE7QUFFcEIsUUFBSSx3QkFBUSxXQUNULFFBQVEsU0FDUixRQUFRLENBQUMsU0FDUixLQUFLLFNBQVMsQ0FBQyxVQUFVO0FBQ3ZCLFdBQUssUUFBUTtBQUFBO0FBRW5CLFFBQUksd0JBQVEsV0FDVCxRQUFRLFdBQ1IsUUFBUSxDQUFDLFNBQ1IsS0FBSyxTQUFTLENBQUMsVUFBVTtBQUN2QixXQUFLLFNBQVM7QUFBQTtBQUVwQixRQUFJLHdCQUFRLFdBQ1QsUUFBUSxrQkFDUixRQUFRLENBQUMsU0FDUixLQUFLLFNBQVMsQ0FBQyxVQUFVO0FBQ3ZCLFdBQUssT0FBTztBQUFBO0FBRWxCLFFBQUksd0JBQVEsV0FDWCxVQUFVLENBQUMsUUFDVixJQUNHLGNBQWMsUUFDZCxTQUNBLFFBQVEsTUFBTTtBQUNiLFdBQUssYUFBYSw4QkFBUyxPQUFPO0FBQUEsUUFFckMsUUFBUSxlQUNSLFFBQVEsQ0FBQyxTQUNSLEtBQUssU0FBUyxDQUFDLFVBQVU7QUFDdkIsV0FBSyxhQUFhO0FBQUE7QUFFeEIsUUFBSSx3QkFBUSxXQUNULFVBQVUsQ0FBQyxRQUNWLElBQ0csY0FBYyxVQUNkLFNBQ0EsUUFBUSxNQUFNO0FBQ2IsV0FBSztBQUNMLFdBQUssU0FBUztBQUFBO0FBQUE7QUFBQSxFQUd4QixVQUFVO0FBQ1IsUUFBSSxFQUFFLGNBQWM7QUFDcEIsY0FBVTtBQUFBO0FBQUEsRUFFWixTQUFTLEdBQUc7QUFDVixRQUFJLE9BQU87QUFDWCxVQUFNLFNBQVMsS0FBSyxJQUFJLFVBQVUsb0JBQW9CLDhCQUFjO0FBQ3BFLFdBQU8sYUFBYyxHQUFHLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxlQUFlLEVBQUUsVUFBVyxRQUFRO0FBQUE7QUFBQTtBQUs1RyxrQ0FBMkMsdUJBQU87QUFBQSxFQUUxQyxTQUFTO0FBQUE7QUFDYixXQUFLLFdBQVc7QUFBQSxRQUNkLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLGdCQUFnQixDQUFDLFdBQW1CO0FBQ2xDLGtCQUFRLFNBQVMsT0FBTztBQUN4QixjQUFJLE1BQU0sS0FBSyxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFwQixXQUFXO0FBQUE7QUFBQTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
